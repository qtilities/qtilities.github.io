{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Qtilities (WIP) We created this organization to share our tools and get more people involved, with the intention of coding and sharing useful tools that can be used to create system utilities using Qt.","title":"Home"},{"location":"faq/","text":"Missing submodules Unfortunately GitHub doesn't include the required git submodules available in the repository in their zip / tar.gz packages, so you need to download the related source manually separately. This leads to the same error below also if you haven't cloned the repository with the --recursive / recurse-submodules switch, resulting with the error: CMake Error at lib/CMakeLists.txt:NNN (add_subdirectory): The source directory path/to/gitsubmodule does not contain a CMakeLists.txt file. -- Configuring incomplete, errors occurred! run git submodule update --init --recursive from the project directory.","title":"FAQ"},{"location":"faq/#missing-submodules","text":"Unfortunately GitHub doesn't include the required git submodules available in the repository in their zip / tar.gz packages, so you need to download the related source manually separately. This leads to the same error below also if you haven't cloned the repository with the --recursive / recurse-submodules switch, resulting with the error: CMake Error at lib/CMakeLists.txt:NNN (add_subdirectory): The source directory path/to/gitsubmodule does not contain a CMakeLists.txt file. -- Configuring incomplete, errors occurred! run git submodule update --init --recursive from the project directory.","title":"Missing submodules"},{"location":"news/","text":"{{ blog_content }}","title":"Latest News"},{"location":"news/posts/2023-07-05-yet-another-website/","text":"...and here I am.","title":"Yet Another Website"},{"location":"sqeleton/","text":"Sqeleton is a Qt project template to start a new project with a ready structure. File structure .gitignore : usual files that git should ignore in the project .clang-format and .editorconfig : these files are used to maintain a uniform code style. It mostly depends on programming habits and so it can be modified to suit your needs (same for all other files), but I'm curious to see if a common preference could be possible to be set. cmake : contains the support files for the resources and should not be modified per project (Pull Requests are welcome). ${CMAKE_PROJECT_NAME}Config.cmake : Project specific CMake configuration file, which must be modified. src : the usual source directory. external : contains git submodules required for the project, currently only a fork of LXQt build tools because some required changes. resources : icon, about dialog content - generic appdata/metainfo and desktop file templates. Usage From the Github project page , when creating a new project based on Sqeleton, click the green Use this template dropdown button and select Create a new repository instead of fork, see the related documentation page for further information. Set the project name in CMakeLists.txt and edit Config.cmake . Replace resources/icons/application.icon with the appropriated icon for the new application without changing the file name. If not a svg , edit PROJECT_ICON_FORMAT in the configuration file: the name of the resulting icon will be set automatically during the CMake configuration. If the translations directory will be moved in a different position, set the new path in PROJECT_TRANSLATIONS_DIR in the configuration file. Adapt the resource file in resources/resources.qrc if needed.","title":"Sqeleton"},{"location":"sqeleton/#file-structure","text":".gitignore : usual files that git should ignore in the project .clang-format and .editorconfig : these files are used to maintain a uniform code style. It mostly depends on programming habits and so it can be modified to suit your needs (same for all other files), but I'm curious to see if a common preference could be possible to be set. cmake : contains the support files for the resources and should not be modified per project (Pull Requests are welcome). ${CMAKE_PROJECT_NAME}Config.cmake : Project specific CMake configuration file, which must be modified. src : the usual source directory. external : contains git submodules required for the project, currently only a fork of LXQt build tools because some required changes. resources : icon, about dialog content - generic appdata/metainfo and desktop file templates.","title":"File structure"},{"location":"sqeleton/#usage","text":"From the Github project page , when creating a new project based on Sqeleton, click the green Use this template dropdown button and select Create a new repository instead of fork, see the related documentation page for further information. Set the project name in CMakeLists.txt and edit Config.cmake . Replace resources/icons/application.icon with the appropriated icon for the new application without changing the file name. If not a svg , edit PROJECT_ICON_FORMAT in the configuration file: the name of the resulting icon will be set automatically during the CMake configuration. If the translations directory will be moved in a different position, set the new path in PROJECT_TRANSLATIONS_DIR in the configuration file. Adapt the resource file in resources/resources.qrc if needed.","title":"Usage"}]}